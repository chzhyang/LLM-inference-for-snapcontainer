ARG UBUNTU_VER=22.04
FROM ubuntu:${UBUNTU_VER} as demo

ENV LANG C.UTF-8
ENV http_proxy http://proxy-dmz.intel.com:911
ENV https_proxy http://proxy-dmz.intel.com:912
ENV no_proxy 127.0.0.1,127.0.1.1,localhost,.intel.com

SHELL ["/bin/bash", "--login", "-c"]

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends --fix-missing \
    autoconf \
    build-essential \
    libgl1-mesa-glx \
    libglib2.0-0 \
    numactl \
    time \
    wget \
    && rm -rf /var/lib/apt/lists/*

# Install and config conda
RUN wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh --no-check-certificate -O /tmp/miniconda.sh && \
    /bin/bash /tmp/miniconda.sh -b -p /opt/miniconda3 && \
    rm /tmp/miniconda.sh

ENV PATH /opt/miniconda3/bin:$PATH
# RUN conda init bash
RUN conda create -n llmenv python=3.9 -y
# Make RUN commands use the new environment:
RUN echo "conda activate llmenv" >> ~/.bashrc
SHELL ["conda", "run", "-n", "llmenv", "/bin/bash", "-c"]

WORKDIR /app

COPY models/llama2-7b-ov-int8 /models/llama2-7b-ov-int8
COPY api.py adapter.py model_worker.py utils.py ./
COPY torch-2.1.0+cpu-cp39-cp39-linux_x86_64.whl torch-2.1.0+cpu-cp39-cp39-linux_x86_64.whl
COPY requirements-openvino.txt requirements.txt
RUN pip install -r requirements.txt --no-cache-dir
RUN rm requirements.txt
RUN rm torch-2.1.0+cpu-cp39-cp39-linux_x86_64.whl
COPY extension/transformers/utils.py /opt/miniconda3/envs/llmenv/lib/python3.9/site-packages/transformers/generation/utils.py

# KMP
ENV KMP_BLOCKTIME=1
ENV KMP_SETTINGS=1
ENV KMP_AFFINITY=granularity=fine,compact,1,0
# OMP
ENV OMP_NUM_THREADS=30

CMD ["numactl", "-C", "120-149", "-m", "0", "conda", "run", "--no-capture-output", "-n", "llmenv", "python", "api.py"]
